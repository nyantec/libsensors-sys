/* automatically generated by rust-bindgen 0.72.1 */

pub const SENSORS_API_VERSION: u32 = 1296;
pub const SENSORS_CHIP_NAME_ADDR_ANY: i32 = -1;
pub const SENSORS_BUS_TYPE_ANY: i32 = -1;
pub const SENSORS_BUS_TYPE_I2C: u32 = 0;
pub const SENSORS_BUS_TYPE_ISA: u32 = 1;
pub const SENSORS_BUS_TYPE_PCI: u32 = 2;
pub const SENSORS_BUS_TYPE_SPI: u32 = 3;
pub const SENSORS_BUS_TYPE_VIRTUAL: u32 = 4;
pub const SENSORS_BUS_TYPE_ACPI: u32 = 5;
pub const SENSORS_BUS_TYPE_HID: u32 = 6;
pub const SENSORS_BUS_TYPE_MDIO: u32 = 7;
pub const SENSORS_BUS_TYPE_SCSI: u32 = 8;
pub const SENSORS_BUS_TYPE_SDIO: u32 = 9;
pub const SENSORS_BUS_NR_ANY: i32 = -1;
pub const SENSORS_BUS_NR_IGNORE: i32 = -2;
pub const SENSORS_MODE_R: u32 = 1;
pub const SENSORS_MODE_W: u32 = 2;
pub const SENSORS_COMPUTE_MAPPING: u32 = 4;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
	_unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
	_unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
	pub _flags: ::std::os::raw::c_int,
	pub _IO_read_ptr: *mut ::std::os::raw::c_char,
	pub _IO_read_end: *mut ::std::os::raw::c_char,
	pub _IO_read_base: *mut ::std::os::raw::c_char,
	pub _IO_write_base: *mut ::std::os::raw::c_char,
	pub _IO_write_ptr: *mut ::std::os::raw::c_char,
	pub _IO_write_end: *mut ::std::os::raw::c_char,
	pub _IO_buf_base: *mut ::std::os::raw::c_char,
	pub _IO_buf_end: *mut ::std::os::raw::c_char,
	pub _IO_save_base: *mut ::std::os::raw::c_char,
	pub _IO_backup_base: *mut ::std::os::raw::c_char,
	pub _IO_save_end: *mut ::std::os::raw::c_char,
	pub _markers: *mut _IO_marker,
	pub _chain: *mut _IO_FILE,
	pub _fileno: ::std::os::raw::c_int,
	pub _flags2: ::std::os::raw::c_int,
	pub _old_offset: __off_t,
	pub _cur_column: ::std::os::raw::c_ushort,
	pub _vtable_offset: ::std::os::raw::c_schar,
	pub _shortbuf: [::std::os::raw::c_char; 1usize],
	pub _lock: *mut _IO_lock_t,
	pub _offset: __off64_t,
	pub _codecvt: *mut _IO_codecvt,
	pub _wide_data: *mut _IO_wide_data,
	pub _freeres_list: *mut _IO_FILE,
	pub _freeres_buf: *mut ::std::os::raw::c_void,
	pub _prevchain: *mut *mut _IO_FILE,
	pub _mode: ::std::os::raw::c_int,
	pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
	["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
	["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
	["Offset of field: _IO_FILE::_IO_read_ptr"][::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
	["Offset of field: _IO_FILE::_IO_read_end"][::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
	["Offset of field: _IO_FILE::_IO_read_base"][::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
	["Offset of field: _IO_FILE::_IO_write_base"][::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
	["Offset of field: _IO_FILE::_IO_write_ptr"][::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
	["Offset of field: _IO_FILE::_IO_write_end"][::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
	["Offset of field: _IO_FILE::_IO_buf_base"][::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
	["Offset of field: _IO_FILE::_IO_buf_end"][::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
	["Offset of field: _IO_FILE::_IO_save_base"][::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
	["Offset of field: _IO_FILE::_IO_backup_base"][::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
	["Offset of field: _IO_FILE::_IO_save_end"][::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
	["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
	["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
	["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
	["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
	["Offset of field: _IO_FILE::_old_offset"][::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
	["Offset of field: _IO_FILE::_cur_column"][::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
	["Offset of field: _IO_FILE::_vtable_offset"][::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
	["Offset of field: _IO_FILE::_shortbuf"][::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
	["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
	["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
	["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
	["Offset of field: _IO_FILE::_wide_data"][::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
	["Offset of field: _IO_FILE::_freeres_list"][::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
	["Offset of field: _IO_FILE::_freeres_buf"][::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
	["Offset of field: _IO_FILE::_prevchain"][::std::mem::offset_of!(_IO_FILE, _prevchain) - 184usize];
	["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
	["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
unsafe extern "C" {
	pub static mut libsensors_version: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_bus_id {
	pub type_: ::std::os::raw::c_short,
	pub nr: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sensors_bus_id"][::std::mem::size_of::<sensors_bus_id>() - 4usize];
	["Alignment of sensors_bus_id"][::std::mem::align_of::<sensors_bus_id>() - 2usize];
	["Offset of field: sensors_bus_id::type_"][::std::mem::offset_of!(sensors_bus_id, type_) - 0usize];
	["Offset of field: sensors_bus_id::nr"][::std::mem::offset_of!(sensors_bus_id, nr) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_chip_name {
	pub prefix: *mut ::std::os::raw::c_char,
	pub bus: sensors_bus_id,
	pub addr: ::std::os::raw::c_int,
	pub path: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sensors_chip_name"][::std::mem::size_of::<sensors_chip_name>() - 24usize];
	["Alignment of sensors_chip_name"][::std::mem::align_of::<sensors_chip_name>() - 8usize];
	["Offset of field: sensors_chip_name::prefix"][::std::mem::offset_of!(sensors_chip_name, prefix) - 0usize];
	["Offset of field: sensors_chip_name::bus"][::std::mem::offset_of!(sensors_chip_name, bus) - 8usize];
	["Offset of field: sensors_chip_name::addr"][::std::mem::offset_of!(sensors_chip_name, addr) - 12usize];
	["Offset of field: sensors_chip_name::path"][::std::mem::offset_of!(sensors_chip_name, path) - 16usize];
};
unsafe extern "C" {
	pub fn sensors_init(input: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_cleanup();
}
unsafe extern "C" {
	pub fn sensors_parse_chip_name(orig_name: *const ::std::os::raw::c_char, res: *mut sensors_chip_name) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_free_chip_name(chip: *mut sensors_chip_name);
}
unsafe extern "C" {
	pub fn sensors_snprintf_chip_name(
		str_: *mut ::std::os::raw::c_char,
		size: usize,
		chip: *const sensors_chip_name,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_get_adapter_name(bus: *const sensors_bus_id) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn sensors_get_label(name: *const sensors_chip_name, feature: *const sensors_feature) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn sensors_get_value(
		name: *const sensors_chip_name,
		subfeat_nr: ::std::os::raw::c_int,
		value: *mut f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_set_value(
		name: *const sensors_chip_name,
		subfeat_nr: ::std::os::raw::c_int,
		value: f64,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_do_chip_sets(name: *const sensors_chip_name) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn sensors_get_detected_chips(match_: *const sensors_chip_name, nr: *mut ::std::os::raw::c_int)
	-> *const sensors_chip_name;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sensors_feature_type {
	SENSORS_FEATURE_IN = 0,
	SENSORS_FEATURE_FAN = 1,
	SENSORS_FEATURE_TEMP = 2,
	SENSORS_FEATURE_POWER = 3,
	SENSORS_FEATURE_ENERGY = 4,
	SENSORS_FEATURE_CURR = 5,
	SENSORS_FEATURE_HUMIDITY = 6,
	SENSORS_FEATURE_PWM = 7,
	SENSORS_FEATURE_MAX_MAIN = 8,
	SENSORS_FEATURE_VID = 16,
	SENSORS_FEATURE_INTRUSION = 17,
	SENSORS_FEATURE_MAX_OTHER = 18,
	SENSORS_FEATURE_BEEP_ENABLE = 24,
	SENSORS_FEATURE_FREQ = 25,
	SENSORS_FEATURE_MAX = 26,
	SENSORS_FEATURE_UNKNOWN = 2147483647,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sensors_subfeature_type {
	SENSORS_SUBFEATURE_IN_INPUT = 0,
	SENSORS_SUBFEATURE_IN_MIN = 1,
	SENSORS_SUBFEATURE_IN_MAX = 2,
	SENSORS_SUBFEATURE_IN_LCRIT = 3,
	SENSORS_SUBFEATURE_IN_CRIT = 4,
	SENSORS_SUBFEATURE_IN_AVERAGE = 5,
	SENSORS_SUBFEATURE_IN_LOWEST = 6,
	SENSORS_SUBFEATURE_IN_HIGHEST = 7,
	SENSORS_SUBFEATURE_IN_RATED_MIN = 8,
	SENSORS_SUBFEATURE_IN_RATED_MAX = 9,
	SENSORS_SUBFEATURE_IN_ALARM = 128,
	SENSORS_SUBFEATURE_IN_MIN_ALARM = 129,
	SENSORS_SUBFEATURE_IN_MAX_ALARM = 130,
	SENSORS_SUBFEATURE_IN_BEEP = 131,
	SENSORS_SUBFEATURE_IN_LCRIT_ALARM = 132,
	SENSORS_SUBFEATURE_IN_CRIT_ALARM = 133,
	SENSORS_SUBFEATURE_FAN_INPUT = 256,
	SENSORS_SUBFEATURE_FAN_MIN = 257,
	SENSORS_SUBFEATURE_FAN_MAX = 258,
	SENSORS_SUBFEATURE_FAN_ALARM = 384,
	SENSORS_SUBFEATURE_FAN_FAULT = 385,
	SENSORS_SUBFEATURE_FAN_DIV = 386,
	SENSORS_SUBFEATURE_FAN_BEEP = 387,
	SENSORS_SUBFEATURE_FAN_PULSES = 388,
	SENSORS_SUBFEATURE_FAN_MIN_ALARM = 389,
	SENSORS_SUBFEATURE_FAN_MAX_ALARM = 390,
	SENSORS_SUBFEATURE_TEMP_INPUT = 512,
	SENSORS_SUBFEATURE_TEMP_MAX = 513,
	SENSORS_SUBFEATURE_TEMP_MAX_HYST = 514,
	SENSORS_SUBFEATURE_TEMP_MIN = 515,
	SENSORS_SUBFEATURE_TEMP_CRIT = 516,
	SENSORS_SUBFEATURE_TEMP_CRIT_HYST = 517,
	SENSORS_SUBFEATURE_TEMP_LCRIT = 518,
	SENSORS_SUBFEATURE_TEMP_EMERGENCY = 519,
	SENSORS_SUBFEATURE_TEMP_EMERGENCY_HYST = 520,
	SENSORS_SUBFEATURE_TEMP_LOWEST = 521,
	SENSORS_SUBFEATURE_TEMP_HIGHEST = 522,
	SENSORS_SUBFEATURE_TEMP_MIN_HYST = 523,
	SENSORS_SUBFEATURE_TEMP_LCRIT_HYST = 524,
	SENSORS_SUBFEATURE_TEMP_ALARM = 640,
	SENSORS_SUBFEATURE_TEMP_MAX_ALARM = 641,
	SENSORS_SUBFEATURE_TEMP_MIN_ALARM = 642,
	SENSORS_SUBFEATURE_TEMP_CRIT_ALARM = 643,
	SENSORS_SUBFEATURE_TEMP_FAULT = 644,
	SENSORS_SUBFEATURE_TEMP_TYPE = 645,
	SENSORS_SUBFEATURE_TEMP_OFFSET = 646,
	SENSORS_SUBFEATURE_TEMP_BEEP = 647,
	SENSORS_SUBFEATURE_TEMP_EMERGENCY_ALARM = 648,
	SENSORS_SUBFEATURE_TEMP_LCRIT_ALARM = 649,
	SENSORS_SUBFEATURE_POWER_AVERAGE = 768,
	SENSORS_SUBFEATURE_POWER_AVERAGE_HIGHEST = 769,
	SENSORS_SUBFEATURE_POWER_AVERAGE_LOWEST = 770,
	SENSORS_SUBFEATURE_POWER_INPUT = 771,
	SENSORS_SUBFEATURE_POWER_INPUT_HIGHEST = 772,
	SENSORS_SUBFEATURE_POWER_INPUT_LOWEST = 773,
	SENSORS_SUBFEATURE_POWER_CAP = 774,
	SENSORS_SUBFEATURE_POWER_CAP_HYST = 775,
	SENSORS_SUBFEATURE_POWER_MAX = 776,
	SENSORS_SUBFEATURE_POWER_CRIT = 777,
	SENSORS_SUBFEATURE_POWER_MIN = 778,
	SENSORS_SUBFEATURE_POWER_LCRIT = 779,
	SENSORS_SUBFEATURE_POWER_RATED_MIN = 780,
	SENSORS_SUBFEATURE_POWER_RATED_MAX = 781,
	SENSORS_SUBFEATURE_POWER_AVERAGE_INTERVAL = 896,
	SENSORS_SUBFEATURE_POWER_ALARM = 897,
	SENSORS_SUBFEATURE_POWER_CAP_ALARM = 898,
	SENSORS_SUBFEATURE_POWER_MAX_ALARM = 899,
	SENSORS_SUBFEATURE_POWER_CRIT_ALARM = 900,
	SENSORS_SUBFEATURE_POWER_MIN_ALARM = 901,
	SENSORS_SUBFEATURE_POWER_LCRIT_ALARM = 902,
	SENSORS_SUBFEATURE_ENERGY_INPUT = 1024,
	SENSORS_SUBFEATURE_CURR_INPUT = 1280,
	SENSORS_SUBFEATURE_CURR_MIN = 1281,
	SENSORS_SUBFEATURE_CURR_MAX = 1282,
	SENSORS_SUBFEATURE_CURR_LCRIT = 1283,
	SENSORS_SUBFEATURE_CURR_CRIT = 1284,
	SENSORS_SUBFEATURE_CURR_AVERAGE = 1285,
	SENSORS_SUBFEATURE_CURR_LOWEST = 1286,
	SENSORS_SUBFEATURE_CURR_HIGHEST = 1287,
	SENSORS_SUBFEATURE_CURR_RATED_MIN = 1288,
	SENSORS_SUBFEATURE_CURR_RATED_MAX = 1289,
	SENSORS_SUBFEATURE_CURR_ALARM = 1408,
	SENSORS_SUBFEATURE_CURR_MIN_ALARM = 1409,
	SENSORS_SUBFEATURE_CURR_MAX_ALARM = 1410,
	SENSORS_SUBFEATURE_CURR_BEEP = 1411,
	SENSORS_SUBFEATURE_CURR_LCRIT_ALARM = 1412,
	SENSORS_SUBFEATURE_CURR_CRIT_ALARM = 1413,
	SENSORS_SUBFEATURE_HUMIDITY_INPUT = 1536,
	SENSORS_SUBFEATURE_PWM_IO = 1792,
	SENSORS_SUBFEATURE_PWM_FREQ = 1793,
	SENSORS_SUBFEATURE_PWM_ENABLE = 1920,
	SENSORS_SUBFEATURE_PWM_MODE = 1921,
	SENSORS_SUBFEATURE_VID = 4096,
	SENSORS_SUBFEATURE_INTRUSION_ALARM = 4352,
	SENSORS_SUBFEATURE_INTRUSION_BEEP = 4353,
	SENSORS_SUBFEATURE_BEEP_ENABLE = 6144,
	SENSORS_SUBFEATURE_FREQ_INPUT = 6400,
	SENSORS_SUBFEATURE_UNKNOWN = 2147483647,
}
impl sensors_quantity {
	pub const SENSORS_QUANTITY_MAX: sensors_quantity = sensors_quantity::SENSORS_QUANTITY_FREQ;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sensors_quantity {
	SENSORS_QUANTITY_UNKNOWN = 0,
	SENSORS_QUANTITY_NONE = 1,
	SENSORS_QUANTITY_BOOL = 2,
	SENSORS_QUANTITY_VOLTAGE = 3,
	SENSORS_QUANTITY_RPM = 4,
	SENSORS_QUANTITY_TEMP = 5,
	SENSORS_QUANTITY_POWER = 6,
	SENSORS_QUANTITY_INTERVAL = 7,
	SENSORS_QUANTITY_ENERGY = 8,
	SENSORS_QUANTITY_CURRENT = 9,
	SENSORS_QUANTITY_HUMIDITY = 10,
	SENSORS_QUANTITY_PWM = 11,
	SENSORS_QUANTITY_FREQ = 12,
}
unsafe extern "C" {
	pub fn sensors_get_subfeature_quantity(arg1: sensors_subfeature_type) -> sensors_quantity;
}
unsafe extern "C" {
	pub fn sensors_get_quantity_name(arg1: sensors_quantity) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn sensors_get_quantity_unit(arg1: sensors_quantity) -> *const ::std::os::raw::c_char;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum sensors_temp_type {
	SENSORS_TEMP_DISABLED = 0,
	SENSORS_TEMP_CPU_DIODE = 1,
	SENSORS_TEMP_TRANSISTOR = 2,
	SENSORS_TEMP_THERMAL_DIODE = 3,
	SENSORS_TEMP_THERMISTOR = 4,
	SENSORS_TEMP_AMD_AMDSI = 5,
	SENSORS_TEMP_INTEL_PECI = 6,
}
unsafe extern "C" {
	pub fn sensors_temp_type_name(sens: sensors_temp_type) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_feature {
	pub name: *mut ::std::os::raw::c_char,
	pub number: ::std::os::raw::c_int,
	pub type_: sensors_feature_type,
	pub first_subfeature: ::std::os::raw::c_int,
	pub padding1: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sensors_feature"][::std::mem::size_of::<sensors_feature>() - 24usize];
	["Alignment of sensors_feature"][::std::mem::align_of::<sensors_feature>() - 8usize];
	["Offset of field: sensors_feature::name"][::std::mem::offset_of!(sensors_feature, name) - 0usize];
	["Offset of field: sensors_feature::number"][::std::mem::offset_of!(sensors_feature, number) - 8usize];
	["Offset of field: sensors_feature::type_"][::std::mem::offset_of!(sensors_feature, type_) - 12usize];
	["Offset of field: sensors_feature::first_subfeature"][::std::mem::offset_of!(sensors_feature, first_subfeature) - 16usize];
	["Offset of field: sensors_feature::padding1"][::std::mem::offset_of!(sensors_feature, padding1) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensors_subfeature {
	pub name: *mut ::std::os::raw::c_char,
	pub number: ::std::os::raw::c_int,
	pub type_: sensors_subfeature_type,
	pub mapping: ::std::os::raw::c_int,
	pub flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sensors_subfeature"][::std::mem::size_of::<sensors_subfeature>() - 24usize];
	["Alignment of sensors_subfeature"][::std::mem::align_of::<sensors_subfeature>() - 8usize];
	["Offset of field: sensors_subfeature::name"][::std::mem::offset_of!(sensors_subfeature, name) - 0usize];
	["Offset of field: sensors_subfeature::number"][::std::mem::offset_of!(sensors_subfeature, number) - 8usize];
	["Offset of field: sensors_subfeature::type_"][::std::mem::offset_of!(sensors_subfeature, type_) - 12usize];
	["Offset of field: sensors_subfeature::mapping"][::std::mem::offset_of!(sensors_subfeature, mapping) - 16usize];
	["Offset of field: sensors_subfeature::flags"][::std::mem::offset_of!(sensors_subfeature, flags) - 20usize];
};
unsafe extern "C" {
	pub fn sensors_get_features(name: *const sensors_chip_name, nr: *mut ::std::os::raw::c_int) -> *const sensors_feature;
}
unsafe extern "C" {
	pub fn sensors_get_all_subfeatures(
		name: *const sensors_chip_name,
		feature: *const sensors_feature,
		nr: *mut ::std::os::raw::c_int,
	) -> *const sensors_subfeature;
}
unsafe extern "C" {
	pub fn sensors_get_subfeature(
		name: *const sensors_chip_name,
		feature: *const sensors_feature,
		type_: sensors_subfeature_type,
	) -> *const sensors_subfeature;
}
